#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define Bas 0
#define Med 1
#define Nav 2
#define Sym 3
#define Num 4
#define Fun 5

&sl {
  release-after-ms = <250>;
};

&mt {
    tapping-term-ms = <200>;
    require-prior-idle-ms = <150>;
};

/ {
    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <Bas Med Nav Sym Num Fun>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <4>;
    };

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";   
        device = <&vtrackball>;
        layers = <Nav>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <12>;
    };

    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <Med>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        scale-divisor = <6>;
        bindings = <&ib_wheel_scaler 1 8>;
    };

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    behaviors {
        hl: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
        };

        hr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
        };
    };

    chosen {
        zmk,matrix_transform = &five_column_transform;
    };

    combos {
        compatible = "zmk,combos";
        combo_hl_leftclk { timeout-ms = <40>; key-positions = <11 12>; bindings = <&mkp LCLK>; require-prior-idle-ms = <150>; };
        combo_hl_middleclk { timeout-ms = <40>; key-positions = <21 22>; bindings = <&mkp RCLK>; require-prior-idle-ms = <150>; };
        combo_hl_rightclk { timeout-ms = <40>; key-positions = <22 23>; bindings = <&mkp MCLK>; require-prior-idle-ms = <150>; };

        combo_rl_leftclk { timeout-ms = <40>; key-positions = <17 18>; bindings = <&mkp LCLK>; require-prior-idle-ms = <150>; };
        combo_rl_middleclk { timeout-ms = <40>; key-positions = <27 28>; bindings = <&mkp RCLK>; require-prior-idle-ms = <150>; };
        combo_rl_rightclk { timeout-ms = <40>; key-positions = <26 27>; bindings = <&mkp MCLK>; require-prior-idle-ms = <150>; };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
            &kp Q      &kp W      &kp E          &kp R         &kp T          &kp Y           &kp U       &kp I       &kp O      &kp P
            &hl LGUI A &hl LALT S &hl LCTRL D    &hl LSHIFT F  &kp G          &kp H           &hr RSHFT J &hr RCTRL K &hr RALT L &hr RGUI SEMICOLON
            &kp Z      &kp X      &kp C          &kp V         &kp B          &kp N           &kp M       &kp COMMA   &kp DOT    &kp SLASH
                                  &lt Med ESCAPE &lt Nav SPACE &lt Fun TAB    &lt Num ENTER   &lt Sym BSPC
            >;
        };

        Media {
            label = "Media";
            bindings = <
            &trans     &trans     &trans       &trans           &trans        &trans     &trans           &trans       &trans     &trans
            &kp C_MUTE &kp C_PREV &kp C_VOL_DN &kp C_VOL_UP     &kp C_NEXT    &kp C_PREV &kp C_VOL_DN     &kp C_VOL_UP &kp C_NEXT &kp C_MUTE
            &trans     &trans     &trans       &trans           &trans        &trans     &trans           &trans       &trans     &trans
                                    &trans       &kp C_PLAY_PAUSE &kp C_STOP    &kp C_STOP &kp C_PLAY_PAUSE
            >;
        };

        Nav {
            label = "Navigation";
            bindings = <
            &trans &trans &trans &trans &trans    &trans   &trans        &trans      &trans    &kp GRAVE
            &trans &trans &trans &trans &trans    &kp LEFT &kp DOWN      &kp UP      &kp RIGHT &kp SQT
            &trans &trans &trans &trans &trans    &kp HOME &kp PAGE_DOWN &kp PAGE_UP &kp END   &kp BACKSLASH
                          &trans &trans &trans    &trans   &trans
            >;
        };

        Sym {
            label = "Symbol";
            bindings = <
            &kp EQUAL &kp AMPS &kp STAR  &kp PLUS  &kp LBRC    &kp RBRC &trans &trans &trans &kp TILDE
            &kp MINUS &kp DLLR &kp PRCNT &kp CARET &kp LPAR    &kp RPAR &trans &trans &trans &kp DQT
            &kp UNDER &kp EXCL &kp AT    &kp HASH  &kp LBKT    &kp RBKT &trans &trans &trans &kp PIPE
                               &trans    &trans    &trans      &trans &trans
            >;
        };

        Num {
            bindings = <
            &trans &kp N7 &kp N8 &kp N9 &trans    &trans &trans &trans &trans &trans  
            &trans &kp N4 &kp N5 &kp N6 &trans    &trans &trans &trans &trans &trans  
            &trans &kp N1 &kp N2 &kp N3 &trans    &trans &trans &trans &trans &trans  
                          &trans &kp N0 &trans    &trans &trans
            >;
        };

        Fun {
            bindings = <
            &trans &trans &trans &trans &trans    &trans &kp F7 &kp F8 &kp F9 &kp F12  
            &trans &trans &trans &trans &trans    &trans &kp F4 &kp F5 &kp F6 &kp F11  
            &trans &trans &trans &trans &trans    &trans &kp F1 &kp F2 &kp F3 &kp F10  
                          &trans &kp N0 &trans    &trans &trans
            >;
        };
    };
};
